class Sensor:
    __doc__ = 'Simple Sensor Class'

    def __init__(self, ra='', acc='', sid='', **kwargs):
        super().__init__(**kwargs)
        self._range = ra
        self._accuracy = acc
        self._sensor_id = sid

    def get_range(self):
        return self._range

    def get_id(self):
        return self._sensor_id


class InfraRedSensor(Sensor):
    __doc__ = 'Infra Red Sensor Class'

    def __init__(self, mot='', ty='', **kwargs):
        super().__init__(**kwargs)
        self._max_op_temp = mot
        self._type = ty

    def get_type(self):
        return self._type
    def get_maxoptemp(self):
        return self._max_op_temp
    def detect_motion(self):
        # Simulating a motion detection event generated by the sensor
        return True


class UltraSonicSensor(Sensor):
    __doc__ = 'Ultra Sonic Sensor Class'

    def __init__(self, freq='', **kwargs):
        super().__init__(**kwargs)
        self._operating_freq = freq

    def get_distance(self):
        # Simulating a distance measured by the sensor (in cm)
        return 75


class SmartBin():
    __doc__ = 'SmartBin Class'

    """Represent smart bin â€“ using multiple inh. - bad solution"""

    def __init__(self, cap,mot,ty,freq, **kwargs):
        super().__init__(**kwargs)
        self._capacity = cap
        self._fill_level = 0
        self._max_op_temp = InfraRedSensor(mot).get_maxoptemp()
        self._type = InfraRedSensor(ty).get_type()
    def get_capacity(self):
        return self._capacity

    def get_fill_level(self):
        return self._fill_level

    def update_fill_level(self):
        """ Computes the amount of available space in the bin."""
        # We assume here that an empty bin will have 100cm of free space
        # between the bin lid and the bottom when empty.
        self._fill_level = (100 - self.get_distance()) / 100 * self._capacity
bin=SmartBin(1,2,3,4)
print(bin._max_op_temp)